-- local js_based_languages = {
--   "typescript",
--   "javascript",
--   "typescriptreact",
--   "javascriptreact",
--   "vue",
-- }
--
-- local dap = require("dap")
--
-- for _, language in ipairs(js_based_languages) do
-- 	dap.configurations[language] = {
-- 		-- Debug single nodejs files
-- 		{
-- 			type = "pwa-node",
-- 			request = "launch",
-- 			name = "Launch file",
-- 			program = "${file}",
-- 			cwd = vim.fn.getcwd(),
-- 			sourceMaps = true,
-- 		},
-- 		-- Debug nodejs processes (make sure to add --inspect when you run the process)
-- 		{
-- 			type = "pwa-node",
-- 			request = "attach",
-- 			name = "Attach",
-- 			processId = require("dap.utils").pick_process,
-- 			cwd = vim.fn.getcwd(),
-- 			sourceMaps = true,
-- 		},
-- 		-- Debug web applications (client side)
-- 		{
-- 			type = "pwa-chrome",
-- 			request = "launch",
-- 			name = "Launch & Debug Chrome",
-- 			url = function()
-- 				local co = coroutine.running()
-- 				return coroutine.create(function()
-- 					vim.ui.input({
-- 						prompt = "Enter URL: ",
-- 						default = "http://localhost:3000",
-- 					}, function(url)
-- 							if url == nil or url == "" then
-- 								return
-- 							else
-- 								coroutine.resume(co, url)
-- 							end
-- 						end)
-- 				end)
-- 			end,
-- 			webRoot = vim.fn.getcwd(),
-- 			protocol = "inspector",
-- 			sourceMaps = true,
-- 			userDataDir = false,
-- 		},
-- 		-- Divider for the launch.json derived configs
-- 		{
-- 			name = "----- ↓ launch.json configs ↓ -----",
-- 			type = "",
-- 			request = "launch",
-- 		},
-- 	}
-- end
--
-- local mappings = {
-- 	{ "<leader>dO", function() require("dap").step_out() end, desc = "Step Out",},
-- 	{ "<leader>do", function() require("dap").step_over() end, desc = "Step Over",},
-- 	{
-- 		"<leader>da",
-- 		function()
-- 			if vim.fn.filereadable(".vscode/launch.json") then
-- 				local dap_vscode = require("dap.ext.vscode")
-- 				dap_vscode.load_launchjs(nil, {
-- 					["pwa-node"] = js_based_languages,
-- 					["chrome"] = js_based_languages,
-- 					["pwa-chrome"] = js_based_languages,
-- 				})
-- 			end
-- 			require("dap").continue()
-- 		end,
-- 		desc = "Run with Args",
-- 	},
-- }
--
-- -- Register the mappings
-- for _, map in ipairs(mappings) do
--   vim.keymap.set("n", map[1], map[2], { desc = map.desc })
-- end
--
--
-- -- -- Set keymaps to control the debugger
-- vim.keymap.set('n', '<F5>', require 'dap'.continue)
-- -- vim.keymap.set('n', '<F10>', require 'dap'.step_over)
-- vim.keymap.set('n', '<F11>', require 'dap'.step_into)
-- -- vim.keymap.set('n', '<F12>', require 'dap'.step_out)
-- vim.keymap.set('n', '<leader>b', require 'dap'.toggle_breakpoint)
-- vim.keymap.set('n', '<leader>B', function()
--   require 'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))
-- end)
--
-- require("neodev").setup({
-- 	library = { plugins = { "nvim-dap-ui" }, types = true },
-- })

-- local dap = require("dap")
--
-- dap.adapters["pwa-node"] = {
-- 	debugger_path = vim.fn.stdpath('data') .. '/mason/packages/js-debug-adapter/js-debug/src/dapDebugServer.js',
-- 	command = "node",
-- 	type = "executable"
-- }
--
-- for _, language in ipairs { "typescript", "javascript" } do
-- 	dap.configurations[language] = {
-- 	{
-- 		type = "pwa-node",
-- 		request = "launch",
-- 		name = "Launch file",
-- 		program = "${file}",
-- 		cwd = "${workspaceFolder}",
-- 		runtimeExecutable = "node",
-- 	},
-- }
-- end
--
